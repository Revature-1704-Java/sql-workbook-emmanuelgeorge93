Select * from Employee;

Select * from Employee where LASTNAME = 'King';

Select * from Employee where FIRSTNAME = 'Andrew' and REPORTSTO is NULL;

Select * from Album order by TITLE desc;

Select FIRSTNAME from Customer order by city asc;

Insert into Genre values (26, 'GlamRock');
Insert into Genre values (27, 'Trash');

Insert into Employee values (55, 'McTestington', 'Tester', 'Desk Manager', 6, '13-DEC-17', '13-DEC-17', '1 Pen Ave', 'Washington', 'DC', 'Canada', 'T5k 2N1', '+1 (000) 000-0000', '+1 (111) 111-1111', 'gmail@gmail.com');
Insert into Employee values (10, 'Testmore', 'Test', 'Support Desk Manager', 6, '13-DEC-17', '13-DEC-17', '2 Pen Ave', 'Washington', 'DC', 'Canada', 'T5k 2N1', '+1 (000) 000-0000', '+1 (111) 111-1111', 'gmail@gmail.com');

Insert into Customer values (60, 'Max', 'Well', '', '111 Place Ln', 'Cheeseburg', '', 'Mexico', '0000', '+4 (2)22 3232 3232', '', 'cheesey@burg.yesmail', 4);
Insert into Customer values (61, 'Fol', 'gers', '', '111 Place Ln', 'Cheeseburg', '', 'Mexico', '0000', '+4 (2)22 3232 3232', '', 'cheesey@burg.yesmail', 4);

Update Customer set FIRSTNAME = 'Robert', LASTNAME = 'Walter' where FIRSTNAME = 'Aaron' and LASTNAME = 'Mitchell';

Update Artist set NAME = 'CCR' where NAME = 'Creedence Clearwater Revival';

Select * from invoice where BILLINGADDRESS like 'T%';

Select * from invoice where TOTAL between 15 and 50;

Select * from employee where HIREDATE between '01-JUN-03' and '01-MAR-04';

Delete from Invoiceline where INVOICEID in (select INVOICEID from Invoice where CUSTOMERID = 32);
Delete from Invoice where CUSTOMERID = 32;
Delete from Customer where FIRSTNAME = 'Robert' and LASTNAME = 'Walter';


--FUNCTIONS


CREATE OR REPLACE FUNCTION 
GET_TIME
RETURN TIMESTAMP AS Z TIMESTAMP;
BEGIN
    SELECT CURRENT_TIMESTAMP INTO Z FROM DUAL;
    RETURN Z;
END;
/

DECLARE
    Z TIMESTAMP;
BEGIN 
    Z:=GET_TIME();
    DBMS_OUTPUT.PUT_LINE(Z);
END;
/

CREATE OR REPLACE FUNCTION 
GET_MEDIA_LEN(X IN NUMBER)
RETURN NUMBER AS Z NUMBER;
    Y VARCHAR2(20);
BEGIN
    SELECT NAME INTO Y FROM MEDIATYPE WHERE MEDIATYPEID =X;
    SELECT LENGTH(Y) INTO Z FROM DUAL;
    RETURN Z;
END;
/

DECLARE
    Z NUMBER;
BEGIN
    Z :=GET_MEDIA_LEN(1);
    DBMS_OUTPUT.PUT_LINE(Z);
END;
/

CREATE OR REPLACE FUNCTION 
AVG_INVOICE
RETURN NUMBER AS Z NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO Z FROM INVOICE;
    RETURN Z;
END;
/

DECLARE
    Z NUMBER;
BEGIN
    Z :=AVG_INVOICE();
    DBMS_OUTPUT.PUT_LINE(Z);
END;
/

CREATE OR REPLACE FUNCTION 
MAX_TRACK
RETURN NUMBER AS Z NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO Z FROM TRACK;
    RETURN Z;
END;
/

DECLARE
    Z NUMBER;
BEGIN
    Z :=MAX_TRACK();
    DBMS_OUTPUT.PUT_LINE(Z);
END;
/

CREATE OR REPLACE FUNCTION 
AVG_INVOICELINE
RETURN NUMBER AS Z NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO Z FROM INVOICELINE;
    RETURN Z;
END;
/

DECLARE
    Z NUMBER;
BEGIN
    Z :=AVG_INVOICELINE();
    DBMS_OUTPUT.PUT_LINE(Z);
END;
/

CREATE OR REPLACE FUNCTION 
OVER_EMPLOYEES
RETURN SYS_REFCURSOR AS S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
    SELECT EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, BIRTHDATE FROM EMPLOYEE WHERE BIRTHDATE > to_date('31-DEC-1968', 'DD-MON-YYYY');
    RETURN S;
END;
/

DECLARE
    S SYS_REFCURSOR;
    SOME_ID EMPLOYEE.EMPLOYEEID%TYPE;
    SOME_LAST EMPLOYEE.LASTNAME%TYPE;
    SOME_FIRST EMPLOYEE.FIRSTNAME%TYPE;
    SOME_TITLE EMPLOYEE.TITLE%TYPE;
    SOME_BIRTHDATE EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    S :=OVER_EMPLOYEES();
    LOOP
        FETCH S INTO SOME_ID, SOME_LAST, SOME_FIRST, SOME_TITLE, SOME_BIRTHDATE;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(SOME_ID || ' ' || SOME_LAST || ' ' || SOME_FIRST || ' ' || SOME_TITLE || ' ' || SOME_BIRTHDATE);
    END LOOP;
    CLOSE S;
END;
/


--4.0 STORED PROCEDURES



CREATE OR REPLACE PROCEDURE
GET_ALL_NAMES(S OUT SYS_REFCURSOR) AS 
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

DECLARE
    S SYS_REFCURSOR;
    SOME_FIRST EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LAST EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_ALL_NAMES(S);
    LOOP
        FETCH S INTO SOME_FIRST, SOME_LAST;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(SOME_FIRST || ' '|| SOME_LAST);
    END LOOP;
    CLOSE S;
END;
/

CREATE OR REPLACE PROCEDURE
UPDATE_EMPLOYEE(LN IN VARCHAR2, FN IN VARCHAR2, BD IN VARCHAR2, LNEW IN VARCHAR2, FNEW IN VARCHAR2, BNEW IN VARCHAR2) AS 
BEGIN
    UPDATE EMPLOYEE SET LASTNAME = LNEW, FIRSTNAME = FNEW, BIRTHDATE = TO_DATE(BNEW, 'DD-MON-YY') WHERE LASTNAME = LN AND FIRSTNAME = FN AND BIRTHDATE = TO_DATE(BD, 'DD-MON-YY');
END;
/

BEGIN
    UPDATE_EMPLOYEE('McTestington', 'Tester', '13-DEC-17', 'TestYO', 'lil test', '12-MAR-1988');
END;
/

CREATE OR REPLACE PROCEDURE
GET_MANAGERS(EMID IN INTEGER, S OUT SYS_REFCURSOR) AS 
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE 
        WHERE EMPLOYEEID = (SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID = EMID);
END;
/

DECLARE
    S SYS_REFCURSOR;
    SOME_FIRST EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LAST EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_MANAGERS(7, S);
    FETCH S INTO SOME_FIRST, SOME_LAST;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE REPORTS TO ' ||SOME_FIRST || ' '|| SOME_LAST);
    CLOSE S;
END;
/

CREATE OR REPLACE PROCEDURE
GET_CUSTOMER(CMID IN INTEGER, S OUT SYS_REFCURSOR) AS 
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER WHERE CUSTOMERID = CMID;
END;
/

DECLARE
    S SYS_REFCURSOR;
    SOME_FIRST CUSTOMER.FIRSTNAME%TYPE;
    SOME_LAST CUSTOMER.LASTNAME%TYPE;
    SOME_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    GET_CUSTOMER(7, S);
    FETCH S INTO SOME_FIRST, SOME_LAST, SOME_COMP;
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ' ||SOME_FIRST || ' '|| SOME_LAST || ' WITH ' || SOME_COMP);
    CLOSE S;
END;
/



-- TRANSACTIONS




CREATE OR REPLACE PROCEDURE
DELETE_INVOICE(VID IN NUMBER) AS
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID = VID;
    DELETE FROM INVOICE WHERE INVOICEID = VID;

    DBMS_OUTPUT.PUT_LINE('INVOICE DELETED');
    COMMIT;
END;
/

BEGIN 
    DELETE_INVOICE(320);
END;
/

CREATE OR REPLACE PROCEDURE
CREATE_CUSTOMER(CID IN NUMBER, FNAME IN VARCHAR2, LNAME IN VARCHAR2, CNAME IN VARCHAR2, ADES IN VARCHAR2, CTY IN VARCHAR2, ST8 IN VARCHAR2, CNTY IN VARCHAR2, ZIP IN VARCHAR2, PNUM IN VARCHAR2, FNUM IN VARCHAR2, MAIL IN VARCHAR2, S_ID IN INTEGER) AS
BEGIN
    INSERT INTO CUSTOMER VALUES(CID, FNAME, LNAME, CNAME, ADES, CTY, ST8, CNTY, ZIP, PNUM, FNUM, MAIL, S_ID);
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDED');
    COMMIT;
END;
/

BEGIN 
    CREATE_CUSTOMER(62, 'TESTFIRSTNAME', 'TESTLASTNAME', 'TESTCOMPANY', 'TESTADDRESS', 'TESTCITY', 'TESTSTATE', 'TESTCOUNTRY', 'TESTZIP', 'TESTPHONENUMBER', 'TESTFAXNUMBER', 'TESTEMAIIL', 3);
END;
/



-- TRIGGERS



CREATE OR REPLACE TRIGGER TR_AFTER
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ADDED');
END;
/

BEGIN
    INSERT INTO EMPLOYEE VALUES (12, 'YES', 'YES', 'YES', 6, '11-DEC-99', '11-DEC-99', 'YES', 'YES', 'YES', 'YES', 'YES', 'YES', 'YES', 'YES');
END;
/



CREATE OR REPLACE TRIGGER TR_UPDATE
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('ALBUM UPDATED');
END;
/

BEGIN
    UPDATE ALBUM SET TITLE = 'TEST' WHERE TITLE = 'Mozart: Chamber Music';
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETED');
END;
/

BEGIN
    DELETE FROM CUSTOMER WHERE CUSTOMERID = 62;
END;
/



--JOINS



SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;


SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
LEFT JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;


SELECT NAME, TITLE
FROM ARTIST
RIGHT JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;


SELECT * 
FROM ARTIST
CROSS JOIN ALBUM ORDER BY ARTIST.NAME ASC;


SELECT *
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.REPORTSTO = E2.REPORTSTO;

SELECT *
FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT *
FROM TRACK INNER JOIN GENRE ON TRACK.GENREID = GENRE.GENREID 
INNER JOIN ALBUM ON TRACK.ALBUMID = ALBUM.ALBUMID 
INNER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID
INNER JOIN PLAYLISTTRACK ON  TRACK.TRACKID = PLAYLISTTRACK.TRACKID
INNER JOIN PLAYLIST ON PLAYLISTTRACK.PLAYLISTID = PLAYLIST.PLAYLISTID
INNER JOIN INVOICELINE ON TRACK.TRACKID = INVOICELINE.TRACKID
INNER JOIN INVOICE ON INVOICELINE.INVOICEID = INVOICE.INVOICEID
INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
INNER JOIN EMPLOYEE ON CUSTOMER.SUPPORTREPID = EMPLOYEE.EMPLOYEEID
INNER JOIN MEDIATYPE ON TRACK.MEDIATYPEID = MEDIATYPE.MEDIATYPEID;

--doesnt work
--BACKUP DATABASE chinook TO DISK='C:\MyChinook.bak'